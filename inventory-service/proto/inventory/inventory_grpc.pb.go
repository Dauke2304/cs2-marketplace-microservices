// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.30.2
// source: shared/proto/inventory.proto

package inventory

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	InventoryService_CreateSkin_FullMethodName        = "/inventory.InventoryService/CreateSkin"
	InventoryService_GetSkin_FullMethodName           = "/inventory.InventoryService/GetSkin"
	InventoryService_ListSkins_FullMethodName         = "/inventory.InventoryService/ListSkins"
	InventoryService_UpdateSkin_FullMethodName        = "/inventory.InventoryService/UpdateSkin"
	InventoryService_DeleteSkin_FullMethodName        = "/inventory.InventoryService/DeleteSkin"
	InventoryService_ToggleListing_FullMethodName     = "/inventory.InventoryService/ToggleListing"
	InventoryService_TransferOwnership_FullMethodName = "/inventory.InventoryService/TransferOwnership"
	InventoryService_GetSkinsByOwner_FullMethodName   = "/inventory.InventoryService/GetSkinsByOwner"
	InventoryService_GetListedSkins_FullMethodName    = "/inventory.InventoryService/GetListedSkins"
)

// InventoryServiceClient is the client API for InventoryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type InventoryServiceClient interface {
	// Basic CRUD
	CreateSkin(ctx context.Context, in *CreateSkinRequest, opts ...grpc.CallOption) (*SkinResponse, error)
	GetSkin(ctx context.Context, in *GetSkinRequest, opts ...grpc.CallOption) (*SkinResponse, error)
	ListSkins(ctx context.Context, in *ListSkinsRequest, opts ...grpc.CallOption) (*ListSkinsResponse, error)
	UpdateSkin(ctx context.Context, in *UpdateSkinRequest, opts ...grpc.CallOption) (*SkinResponse, error)
	DeleteSkin(ctx context.Context, in *DeleteSkinRequest, opts ...grpc.CallOption) (*DeleteResponse, error)
	// Special operations
	ToggleListing(ctx context.Context, in *ToggleListingRequest, opts ...grpc.CallOption) (*SkinResponse, error)
	TransferOwnership(ctx context.Context, in *TransferOwnershipRequest, opts ...grpc.CallOption) (*SkinResponse, error)
	// Additional endpoints
	GetSkinsByOwner(ctx context.Context, in *GetSkinRequest, opts ...grpc.CallOption) (*ListSkinsResponse, error)
	GetListedSkins(ctx context.Context, in *GetSkinRequest, opts ...grpc.CallOption) (*ListSkinsResponse, error)
}

type inventoryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewInventoryServiceClient(cc grpc.ClientConnInterface) InventoryServiceClient {
	return &inventoryServiceClient{cc}
}

func (c *inventoryServiceClient) CreateSkin(ctx context.Context, in *CreateSkinRequest, opts ...grpc.CallOption) (*SkinResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SkinResponse)
	err := c.cc.Invoke(ctx, InventoryService_CreateSkin_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) GetSkin(ctx context.Context, in *GetSkinRequest, opts ...grpc.CallOption) (*SkinResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SkinResponse)
	err := c.cc.Invoke(ctx, InventoryService_GetSkin_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) ListSkins(ctx context.Context, in *ListSkinsRequest, opts ...grpc.CallOption) (*ListSkinsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListSkinsResponse)
	err := c.cc.Invoke(ctx, InventoryService_ListSkins_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) UpdateSkin(ctx context.Context, in *UpdateSkinRequest, opts ...grpc.CallOption) (*SkinResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SkinResponse)
	err := c.cc.Invoke(ctx, InventoryService_UpdateSkin_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) DeleteSkin(ctx context.Context, in *DeleteSkinRequest, opts ...grpc.CallOption) (*DeleteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteResponse)
	err := c.cc.Invoke(ctx, InventoryService_DeleteSkin_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) ToggleListing(ctx context.Context, in *ToggleListingRequest, opts ...grpc.CallOption) (*SkinResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SkinResponse)
	err := c.cc.Invoke(ctx, InventoryService_ToggleListing_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) TransferOwnership(ctx context.Context, in *TransferOwnershipRequest, opts ...grpc.CallOption) (*SkinResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SkinResponse)
	err := c.cc.Invoke(ctx, InventoryService_TransferOwnership_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) GetSkinsByOwner(ctx context.Context, in *GetSkinRequest, opts ...grpc.CallOption) (*ListSkinsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListSkinsResponse)
	err := c.cc.Invoke(ctx, InventoryService_GetSkinsByOwner_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) GetListedSkins(ctx context.Context, in *GetSkinRequest, opts ...grpc.CallOption) (*ListSkinsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListSkinsResponse)
	err := c.cc.Invoke(ctx, InventoryService_GetListedSkins_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InventoryServiceServer is the server API for InventoryService service.
// All implementations must embed UnimplementedInventoryServiceServer
// for forward compatibility.
type InventoryServiceServer interface {
	// Basic CRUD
	CreateSkin(context.Context, *CreateSkinRequest) (*SkinResponse, error)
	GetSkin(context.Context, *GetSkinRequest) (*SkinResponse, error)
	ListSkins(context.Context, *ListSkinsRequest) (*ListSkinsResponse, error)
	UpdateSkin(context.Context, *UpdateSkinRequest) (*SkinResponse, error)
	DeleteSkin(context.Context, *DeleteSkinRequest) (*DeleteResponse, error)
	// Special operations
	ToggleListing(context.Context, *ToggleListingRequest) (*SkinResponse, error)
	TransferOwnership(context.Context, *TransferOwnershipRequest) (*SkinResponse, error)
	// Additional endpoints
	GetSkinsByOwner(context.Context, *GetSkinRequest) (*ListSkinsResponse, error)
	GetListedSkins(context.Context, *GetSkinRequest) (*ListSkinsResponse, error)
	mustEmbedUnimplementedInventoryServiceServer()
}

// UnimplementedInventoryServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedInventoryServiceServer struct{}

func (UnimplementedInventoryServiceServer) CreateSkin(context.Context, *CreateSkinRequest) (*SkinResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSkin not implemented")
}
func (UnimplementedInventoryServiceServer) GetSkin(context.Context, *GetSkinRequest) (*SkinResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSkin not implemented")
}
func (UnimplementedInventoryServiceServer) ListSkins(context.Context, *ListSkinsRequest) (*ListSkinsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSkins not implemented")
}
func (UnimplementedInventoryServiceServer) UpdateSkin(context.Context, *UpdateSkinRequest) (*SkinResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSkin not implemented")
}
func (UnimplementedInventoryServiceServer) DeleteSkin(context.Context, *DeleteSkinRequest) (*DeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSkin not implemented")
}
func (UnimplementedInventoryServiceServer) ToggleListing(context.Context, *ToggleListingRequest) (*SkinResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ToggleListing not implemented")
}
func (UnimplementedInventoryServiceServer) TransferOwnership(context.Context, *TransferOwnershipRequest) (*SkinResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TransferOwnership not implemented")
}
func (UnimplementedInventoryServiceServer) GetSkinsByOwner(context.Context, *GetSkinRequest) (*ListSkinsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSkinsByOwner not implemented")
}
func (UnimplementedInventoryServiceServer) GetListedSkins(context.Context, *GetSkinRequest) (*ListSkinsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetListedSkins not implemented")
}
func (UnimplementedInventoryServiceServer) mustEmbedUnimplementedInventoryServiceServer() {}
func (UnimplementedInventoryServiceServer) testEmbeddedByValue()                          {}

// UnsafeInventoryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to InventoryServiceServer will
// result in compilation errors.
type UnsafeInventoryServiceServer interface {
	mustEmbedUnimplementedInventoryServiceServer()
}

func RegisterInventoryServiceServer(s grpc.ServiceRegistrar, srv InventoryServiceServer) {
	// If the following call pancis, it indicates UnimplementedInventoryServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&InventoryService_ServiceDesc, srv)
}

func _InventoryService_CreateSkin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSkinRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).CreateSkin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InventoryService_CreateSkin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).CreateSkin(ctx, req.(*CreateSkinRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryService_GetSkin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSkinRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).GetSkin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InventoryService_GetSkin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).GetSkin(ctx, req.(*GetSkinRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryService_ListSkins_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSkinsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).ListSkins(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InventoryService_ListSkins_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).ListSkins(ctx, req.(*ListSkinsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryService_UpdateSkin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSkinRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).UpdateSkin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InventoryService_UpdateSkin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).UpdateSkin(ctx, req.(*UpdateSkinRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryService_DeleteSkin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSkinRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).DeleteSkin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InventoryService_DeleteSkin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).DeleteSkin(ctx, req.(*DeleteSkinRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryService_ToggleListing_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ToggleListingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).ToggleListing(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InventoryService_ToggleListing_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).ToggleListing(ctx, req.(*ToggleListingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryService_TransferOwnership_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransferOwnershipRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).TransferOwnership(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InventoryService_TransferOwnership_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).TransferOwnership(ctx, req.(*TransferOwnershipRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryService_GetSkinsByOwner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSkinRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).GetSkinsByOwner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InventoryService_GetSkinsByOwner_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).GetSkinsByOwner(ctx, req.(*GetSkinRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryService_GetListedSkins_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSkinRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).GetListedSkins(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InventoryService_GetListedSkins_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).GetListedSkins(ctx, req.(*GetSkinRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// InventoryService_ServiceDesc is the grpc.ServiceDesc for InventoryService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var InventoryService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "inventory.InventoryService",
	HandlerType: (*InventoryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateSkin",
			Handler:    _InventoryService_CreateSkin_Handler,
		},
		{
			MethodName: "GetSkin",
			Handler:    _InventoryService_GetSkin_Handler,
		},
		{
			MethodName: "ListSkins",
			Handler:    _InventoryService_ListSkins_Handler,
		},
		{
			MethodName: "UpdateSkin",
			Handler:    _InventoryService_UpdateSkin_Handler,
		},
		{
			MethodName: "DeleteSkin",
			Handler:    _InventoryService_DeleteSkin_Handler,
		},
		{
			MethodName: "ToggleListing",
			Handler:    _InventoryService_ToggleListing_Handler,
		},
		{
			MethodName: "TransferOwnership",
			Handler:    _InventoryService_TransferOwnership_Handler,
		},
		{
			MethodName: "GetSkinsByOwner",
			Handler:    _InventoryService_GetSkinsByOwner_Handler,
		},
		{
			MethodName: "GetListedSkins",
			Handler:    _InventoryService_GetListedSkins_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "shared/proto/inventory.proto",
}
